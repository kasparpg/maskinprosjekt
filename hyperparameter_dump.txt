params = {
    'iterations': 2000,
    'learning_rate': 0.03,
    # 'objective': RmsleObjective(),
    # 'eval_metric': RmsleMetric()
    'objective': RmseObjective(),
    'eval_metric': LogTargetsRmsleMetric()
}

params = {'iterations': 1000,
 'loss_function': 'RMSE',
 'eval_metric': LogTargetsRmsleMetric(),
 'objective': RmseObjective(),
 'depth': 7.0,
 'learning_rate': 0.0494195212108839}

params = {'colsample_bylevel': 0.07329097359385545, 'depth': 9, 'boosting_type': 'Plain', 'bootstrap_type': 'Bayesian', 'bagging_temperature': 1.1734504015536018}
params = {'depth': 9, 'boosting_type': 'Plain', 'bootstrap_type': 'Bernoulli', 'subsample': 0.635180352520854}

# params = {
    #     'max_depth': np.arange(4, 10),
    #     'learning_rate': np.linspace(0.01, 0.03, 10),
    #     # 'num_boost_rounds': np.arange(100, 400, 20),
    #     'colsample_bytree': np.linspace(0.5, 1, 10)
    # }      
    # params = xgb_cross_validation(params, dtrain)


    {'iterations': 265.0,
 'loss_function': 'RMSE',
 'verbose': 0,
 'eval_metric': <objectives_and_metrics.LogTargetsRmsleMetric at 0x7fdc1919a940>,
 'objective': <objectives_and_metrics.RmseObjective at 0x7fdc1919a610>,
 'depth': 7.0,
 'learning_rate': 0.0494195212108839}

 0.7270089548135714 {'colsample_bylevel': 0.07329097359385545, 'depth': 9, 'boosting_type': 'Plain', 'bootstrap_type': 'Bayesian', 'bagging_temperature': 1.1734504015536018}

Value: 0.7432044519085643
{'depth': 9, 'boosting_type': 'Plain', 'bootstrap_type': 'Bernoulli', 'subsample': 0.635180352520854}

0.7269234941989806 and parameters: {'colsample_bylevel': 0.01860772707528353, 'depth': 7, 'boosting_type': 'Ordered', 'bootstrap_type': 'Bernoulli', 'subsample': 0.8838739162766659}


Best trial:
Value: 0.7369852861098662
Params:
{'depth': 6, 'boosting_type': 'Plain', 'bootstrap_type': 'Bayesian', 'bagging_temperature': 0.019299542503292473}


Number of finished trials: 100
Best trial:
Value: 0.7124988673592206
Params:
{'depth': 6, 'boosting_type': 'Plain', 'bootstrap_type': 'Bernoulli', 'subsample': 0.675824912923723}








# pruning_callback = optuna.integration.CatBoostPruningCallback(trial, 'LogTargetsRmsleMetric')
# callbacks=[pruning_callback]
# pruning_callback.check_pruned()
